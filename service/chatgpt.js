const express = require('express')
const localStorage = require('localStorage')
const { openAIKey } = require('../config')
const router = express.Router()

let api = (async () => {
  const { ChatGPTAPI } = await import('chatgpt')
  api = new ChatGPTAPI({ apiKey: openAIKey })
})()

const TIMEOUT_IN_MS = 3600 * 1000; // 1 hour
let timeouts = {};

router.all('/chatgpt', async ({ query: { string, user } }, response) => {
  clearTimeout(timeouts[user]); // ÂèñÊ∂à‰πãÂâçÁöÑË∂ÖÊó∂ËÆ°Êó∂Âô®

  if (string === '/new' || string === '/Êñ∞ÈóÆÈ¢ò') {
    // localStorage.setItem(user, JSON.stringify({ messages: [] }))
    localStorage.removeItem(user)
    // ËøîÂõû‰∏Ä‰∏™ËØ¥ÊòéÊ∂àÊÅØ
    return response.send({
      choices: [{ message: { content: 'üÜïÊàëÂ∑≤ÁªèÂøòËÆ∞‰πãÂâçÁöÑÂØπËØù‰∫ÜÔºå‰Ω†ÂèØ‰ª•ÂºÄÂßãÈóÆÊñ∞ÁöÑÈóÆÈ¢ò‰∫Ü„ÄÇ' } }]
    })
  }

  let keychain = openAIKey.split(',')
  let apiKey = ''

  if (localStorage.openAIKey) {
    apiKey = localStorage.openAIKey
  } else {
    apiKey = keychain[0]
    localStorage.setItem('openAIKey', apiKey)
  }

  // Ëé∑ÂèñËØ•Áî®Êà∑ÁöÑËÅäÂ§©ËÆ∞ÂΩïÊï∞ÁªÑÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôÊñ∞Âª∫‰∏Ä‰∏™Á©∫Êï∞ÁªÑ
  const { messages = [] } = JSON.parse(localStorage[user] || '{}')
  let new_question = true
  if (localStorage[user]) {
    new_question = false
  }

  messages.push({ role: 'user', content: string })

  try {
    let parentMessageId
    if (messages.length > 1) {
      parentMessageId = messages[messages.length - 2].id
    }

    const res = await api.sendMessage(string, { parentMessageId })

    messages.push({ role: 'assistant', content: res.text, id: res.id })
    // ÈíàÂØπËØ•Áî®Êà∑ÁöÑËÅäÂ§©ËÆ∞ÂΩïÊï∞ÁªÑËøõË°åÊìç‰ΩúÔºåÊúÄÂêéÂ∞ÜÁªìÊûú‰øùÂ≠òÂõû localStorage ‰∏≠
    localStorage.setItem(user, JSON.stringify({ messages }))

    if (new_question) {
      res.text = 'üÜïËøôÊòØ‰∏Ä‰∏™Êñ∞ÈóÆÈ¢òÁöÑÂºÄÂßã(Â∑≤Èó≤ÁΩÆË∂ÖËøá‰∏ÄÂ∞èÊó∂ÊàñÂàö‰ΩøÁî®Ëøá/newÊåá‰ª§)Ôºö\n\n' + res.text
    }
    response.send({ choices: [{ message: { content: res.text } }] })
    // ËÆæÁΩÆË∂ÖÊó∂ËÆ°Êó∂Âô®Ôºå1‰∏™Â∞èÊó∂ÂêéÊ∏ÖÁ©∫ËØ•Áî®Êà∑ÁöÑ messages
    timeouts[user] = setTimeout(() => {
      // localStorage.setItem(user, JSON.stringify({ messages: [] }))
      localStorage.removeItem(user)
    }, TIMEOUT_IN_MS)
  } catch (error) {
    if ([429, 401].includes(error?.response?.status)) {
      let newAIKey = ''
      if (!keychain.includes(apiKey) || keychain.indexOf(apiKey) + 1 >= keychain.length) {
        newAIKey = keychain[0]
      } else {
        newAIKey = keychain[keychain.indexOf(apiKey) + 1]
      }
      localStorage.setItem('openAIKey', newAIKey)
      response.send({
        choices: [
          {
            message: {
              content: `${error.response.status} ${
                error.response.statusText
              } [Â∑≤ÂàáÊç¢Ëá≥openAIKey:${newAIKey.slice(0, 10)}]`
            }
          }
        ]
      })
    } else {
      response.send({
        choices: [{ message: { content: JSON.stringify(error) } }]
      })
    }
  }
})

module.exports = router
